name: Build & publish docker images
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./docker/Dockerfile.cpu
            image: ghcr.io/Monash-Connected-Autonomous-Vehicle/mcav_autonomy_cpu
          - dockerfile: ./docker/Dockerfile.gpu
            image: ghcr.io/Monash-Connected-Autonomous-Vehicle/mcav_autonomy_gpu
          - dockerfile: ./docker/Dockerfile.arm
            image: ghcr.io/Monash-Connected-Autonomous-Vehicle/mcav_autonomy_arm
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ matrix.image }}

      - name: Setup Docker buildx for layer caching
        uses: docker/setup-buildx-action@v2
      
      - name: Setup QEMU to build ARM architecture images
        if: matrix.dockerfile == './docker/Dockerfile.arm'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'arm64,arm'

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          provenance: false # fixes issue about unknown/unknown architecture, see https://github.com/docker/build-push-action/issues/820
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }} # push the image only if it's not a pull request
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # for buildx caching of layers
          cache-to: type=gha,mode=max # for buildx caching of layers